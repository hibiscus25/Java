 - break
 - continue
 - return

------------------------------------------------ общее -----------------------------------------------------------------
        Java поддерживает три оператора перехода:
                — break,
                — continue
                — return
        Они передают управление в другую часть вашей программы

-------------------------------------------------- break ---------------------------------------------------------------
        1. Команда прерывает выполнение любого цикла for, while, do ... while  вне зависимости от значения условия.
   Встретим команду break, Java пропустит все следующие за ней в теле цикла команды, не будет проверять условие,  если это
   цикл  do ... while , и перейдет к выполнению команды, следующей после цикла
            - если использовать команду break внутри вложенного цикла, она завершит выполнение только внутреннего цикла
            - команда break, завершающая выполнение ветви switch, стоящего внутри цикла, прерывает только этот оператор switch

            Пример:
                    int nmax = 20;
                    for (int n = 0; n < nmax; n++){
                        if ((n*n) >= nmax)
                            break;
                        System.out.println ( "n равно = " + n + "  " + "n квадрат = " + n * n);
                    }
            Результат:
                    n равно = 0  n квадрат = 0
                    n равно = 1  n квадрат = 1
                    n равно = 2  n квадрат = 4
                    n равно = 3  n квадрат = 9
                    n равно = 4  n квадрат = 16
                        - выполнение цикла прерывается, когда выполняется условие if и Java выполняет команду break

        2. При необходимоси завершить выполнение нескольких вложенных циклов одной командой в теле самого внутреннего цикла,
   используется:
           break label
              - метка label - это идентификатор некоторого блока программы, внешнего по отношению к команде break
              - если обычная команда break без метки прерывает выполнение непосредственно того блока,
            в котором находится (самого внутреннего), то break label, ссылающейся на некоторый из объемлющих блоков,
            прерывает выполнение всех последовательно вложенных блоков, включая этот объемлюющий:
           Пример1:
                   lab_first: {                                     // блок, помеченный lab_first
                       lab_second:{                                 // блок c меткой lab_second
                          break lab_first;                          // выход из блоков lab_second и lab_first
                                   }
                               }
                       - отдельный оператор может быть помечен так же, как и блок
                       - метка должна стоять перед блоком  и отделяться от него двоеточием
                       - имена меток подчиняются правилам, действующим для любых других идентификаторов

           Пример2:
                   for (int i = 1; i < 4; i++) {
                     Блок1:{
                        Блок2:{
                            Блок3:{
                                System.out.println("i = " + i);
                                if (i == 1)
                                    break Блок1;
                                if (i == 1)
                                    break Блок2;
                                if (i == 1)
                                    break Блок3;
                            }
                            System.out.println(" - завершен Блок3");
                        }
                        System.out.println(" - завершен Блок2");
                     }
                     System.out.println(" - завершен Блок1");
                   }
                   System.out.println("----конец цикла for----");

             Результа:
                    i = 1
                      - завершен Блок1
                    i = 2
                      - завершен Блок3
                      - завершен Блок2
                      - завершен Блок1
                    i = 3
                      - завершен Блок3
                      - завершен Блок2
                      - завершен Блок1
                    ----конец цикла for----

                - также нужно помнить, что метка команды break не может относиться к текущему или внутреннему блоку,
           а только к внешнему

           Пример3 (ОШИБКА. пример не компилируется):
                   for (int i = 1; i < 4; i++) {
                       Метка1:{
                           for (int x = 0; x < 3; x++) {
                               System.out.println("x = " + x);
                           }
                           for (int y = 0; y < 50; y++) {
                               if (y == 10)
                                   break Метка1;                                // НЕЛЬЗЯ ссылаться на посторонний блок
                               if (y == 25)
                                   break Метка2;                                // НЕЛЬЗЯ ссылаться на внутренний блок
                               System.out.println("y = " + y);
                               Метка2:{
                                   System.out.println("y = 25");
                               }
                           }
                       }
                   }

----------------------------------------------- continue ---------------------------------------------------------------
        1. Команда используется, для того, чтобы не прерывать выполнение цикла, а перейти к следующей итерации, пропустив
   оставшиеся команды в теле цикла.
           - continue еще называется "командой принудительног перехода к следующему повтору цикла"
                - в цикле while и do while continue вызывает передачу управления непосредственно условному выражению,
             которое управляет циклом
                - в цикле for управление переходит сначала к итерационной части оператора for и затем к условному выражению

        2. По команде continue интерпретатор заново вычисляет условия цикла и, если оно выполнено, продолжает выполнение
   тела цикла

        Пример (выводит на печать, только не четные числа):
                    for (int num = 0; num <= 10; num ++){
                        if ((num % 2) == 0)
                            continue;
                        System.out.println(num);
                    }

        3. У continue так же есть расширенная форма:
                    сontinue label
                        - эта команда передает управление не на конец помеченного блока, а на его начало
            Пример:
                    outer:
                       for (int i = 0; i < 10; i++) {
                         for (int k = 0; k < 10; k++) {
                            if (k > i) {
                                System.out.println("+");
                                continue outer;
                            }
                           System.out.print(" " + (i * k));
                         }
                       }
                       System.out.println();

            Результат:
                        0+                                                          //при i = 0
                        0 1+                                                        //при i = 1
                        0 2 4+                                                      //при i = 2
                        0 3 6 9+                                                    //при i = 3
                        0 4 8 12 16+                                                //при i = 4
                        0 5 10 15 20 25+                                            //при i = 5
                        0 6 12 18 24 30 36+                                         //при i = 6
                        0 7 14 21 28 35 42 49+                                      //при i = 7
                        0 8 16 24 32 40 48 56 64+                                   //при i = 8
                        0 9 18 27 36 45 54 63 72 81+                                //при i = 9


------------------------------------------------- return ---------------------------------------------------------------
        1. return используется для явного возврата из метода, т. е. передает программное управление обратно в вызывающую программу.

        2. Можно использовать в любом месте метода для выполнения перехода обратно в вызывающую этот метод программу.
    Оператор return немедленно заканчивает выполнение метода, в котором он находится.

        Пример:
            public static void main(String[] args) {
                boolean t = true;
                System.out.println("Перед оператором return.");
                if (t)
                    return;                                         // возврат в вызывающую программу
                System.out.println("Этот оператор никогда не выполнится.");
            }
                -return выполняет возврат к Java-системе во время выполнения, т. к. именно эта система вызывает метод main()

        Результат:
                Перед оператором return.
                    - метод System.out.println("Этот оператор никогда не выполнится."); не выполняется
                    так как он стоит перед оператором return, который передает управление обратно в вызывающую программу
                    - в примере if (t) необходим
                          - без него бы Java-компилятор выдал бы ошибку "недостижимый код", потому что он знал бы,
                         что последний оператор println() никогда  не будет выполняться
