 - класс Math
 - класс Random
 - класс SecureRandom
 - класс ThreadLocalRandom

 -------------------------------------------------- Math ---------------------------------------------------------------
        Класс Math библиотеки Java имеет метод random(), который генерирует случайное значение в диапазоне [0,1)
            - необходимо обратить внимание, что данный диапазон не включает 1 и при описании закрывается круглой скобкой
            - поэтому теоретически возможно, но практически очень трудно предсказать сгенерированное значение
            - поскольку существует небольшая вероятность предсказыания случайно-сгенерируемого значения,
              поэтому такие числа принято называть не случайными, а псевдослучайными

        Чтобы получить псевдослучайное число в определенном диапазоне необходимо значение метода random() умножить на величину диапазона значений
   Например, необходимо генерировать значение в диапазоне от min до max.
                                double d = Math.random() * (max - min) + min;

             a) допустим, что необходимо получить значение в диапазоне [1,10), где min=1, max=10 (10 исключительно)
                    -   алгоритм работает следующим образом :
                            Диапазон [0;1) умножается на 9=(10-1), соответственно получаем :
                                -   нижняя граница:     0*9 = 0
                                -   верхняя граница:    1*9 = 9
                                -   получаем диапазон [0,9), к которому добавляем min=1.
                            В результате имеем :
                                -   нижняя граница: 0 + 1 = 1;
                                -   верхняя граница: 9 + 1 = 10.
                            После подстановки значений в выражение, получим :
                                double d = Math.random() * (10 - 1) + 1;

            б) допустим, что необходимо получить псевдослучайное число в диапазоне от -10 до 10 (исключительно)
                    - необходимо значение Math.random() умножить на 20 и вычесть 10 :
                            double d = Math.random() * (10 - (-10)) + (-10);
                            double d = Math.random() * 20 - 10;


        Чтобы сгенерировать целочисленное псевдослучайное число используется представленное выше выражение, в котором произведение «приводится»
   к целочисленному значению.
        Например, попробуем получить псевдослучайное значение в диапазоне [5,20]
                    - обратите внимание, что закрывающаяся скобка квадратная, т.е. 20 входит в диапазон
                    - в этом случае к разности между максимальным и минимальным значениями следует добавить 1,
                      т.е. определить диапазон целочисленных значений [5,21), где 21 не попадает в желаемый диапазон :
                             int i = (int) Math.random() * (20 - 5 + 1) + 5;
                             int i = (int) Math.random() * 16 + 5;


 -------------------------------------------------- Класс Random -------------------------------------------------------
        В качестве генератора псевдослучайных чисел можно также использовать класс java.util.Random, имеющий два конструктора:
            -   public Random()
            -   public Random(long)

        Поскольку Random создаёт псевдослучайное число, то определив начальное число, устанавливается начальная точка случайной последовательности,
   способствующая получению одинаковых случайных последовательностей.
        Чтобы избежать такого совпадения, обычно применяют второй конструктор с использованием в качестве инициирующего значения текущего времени.

        Наиболее часто используемые методы генератора Random :
            -   boolean nextBoolean()           -	    получение следующего случайного значения типа boolean
            -   double nextDouble()             -       получение следующего случайного значения типа double
            -   float nextFloat()               -       получение следующего случайного значения типа float
            -   int nextInt()                   -       получение следующего случайного значения типа int
            -   int nextInt(int n)              -       получение следующего случайного значения типа int в диапазоне от 0 до n
            -   long nextLong()                 -       получение следующего случайного значения типа long
            -   void nextBytes(byte[] buf)      -   	формирование массива из случайно генерируемых значений

        Пример получения псевдослучайного целочисленного значения с использованием класса Random :
                Random random = new Random();
                int i = random.nextInt();

        С классом Random алгоритм получения псевдослучайного числа такой же, как и у метода random класса Math.
   Допустим, что нам необходимо получить случайное число в диапазоне [5,100], 100 включительно
                int min = 5;
                int max = 100;
                int diff = max - min;
                Random random = new Random();
                int i = random.nextInt(diff + 1) + min;


 ------------------------------------------------ Класс SecureRandom ---------------------------------------------------
        Для криптографии следует применять класс SecureRandom, использующий криптографически сильный генератор случайных чисел
   (random number generator RNG).

        В следующем примере формируется массив псевдослучайных значений типа byte :
                SecureRandom random = new SecureRandom();
                    byte bytes[] = new byte[8];                     // в примере пустой массив
                    random.nextBytes(bytes);                        // после этого массив заполняется случайными байтами

                Этот же массив можно сформировать методом generateSeed :
                    byte seed[] = random.generateSeed(8);


 ---------------------------------------------- Класс ThreadLocalRandom ------------------------------------------------
        Также есть класс ThreadLocalRandom из многопоточного пакета java.util.concurrent, который следует использовать для получения
   псевдослучайных значений в многопоточных приложениях.
        Для получения экземпляра ThreadLocalRandom следует использовать статический метод current() данного класса.

        Пример :
                    ThreadLocalRandom random = ThreadLocalRandom.current();
                        System.out.println("Random values : ");
                        System.out.println("boolean : " + random.nextBoolean());
                        System.out.println("int : " + random.nextInt());
                        System.out.println("float : " + random.nextFloat());
                        System.out.println("long : " + random.nextLong());
                        System.out.println("int from 0 to 5 : " + random.nextInt(5));
                        System.out.println("long from 5 to 15 : " + random.nextLong(5,15));