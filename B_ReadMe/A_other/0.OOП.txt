ООП     -   парадигма программирования, в которой ключевым блоком является объект, который соотносится
            с объектом в конкретной задаче
========================================================================================================================
Главные аспекты:
        -   любая система состоит из объектов;                              (комната состоит из стен, потолка, окна и тп)
        -   каждый объект имеет состояние (значение всех полей объекта) и поведение (дверь открывается/закрывается и тп);
        -   объекты взаимодействуют между собой определенным образом
========================================================================================================================
Принципы ООП:
        -   Инкапсуляция
        -   Наследование
        -   Полиморфизм
========================================================================================================================
Инкапсуляция:
        -   механизм, благодаря которому любой класс или часть системы рассматирваются  как отдельный модуль
            и пользователь этого модуля может взаимодействовать с ним только определенным способом и не видит
            реализации этого модуля
        -   сводит к минимуму количество связей между частями системы, тем самым, упрощая изменение модулей (рефакторинг)
========================================================================================================================
Наследование:
        -   механизм создания одного класса с помощью другого с использованием всех свойств и методов
            суперкласса добавляя новые свойства и методы при необходимости
        -   отображает иерархичность окружающего мира
========================================================================================================================
Полиморфизм:
        -   механизм, благодаря которому подклассы могут изменять реализацию методов суперкласса,
            сохраняя его сигнатуру, благодаря чему интерфейс суперкласса остается неизменным
        -   позволяет работать с объектами подклассов как с объектами суперкласса, даже с учетом того,
            что реализация определенных методов у подклассов может отличаться от реализации методов суперкласса
========================================================================================================================