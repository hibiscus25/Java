1. OutputStream / InputStream
2. RandomAccessFile
3. Writer / Reader
4. ZipFile / ZipEntry / ZipOutputStream / ZipInputStream


----------------------------------------------- Потоки ввода/вывода ----------------------------------------------------
        1. Потоки ввода/вывода делятся:
                1. делятся по направлению:
                        - потоки ввода
                        - потоки вывода
                2. делятся по типу данных:
                        - работают с байтами
                        - работают с символами

        2. Основные абстрактные классы:
                                                    поток ввода               поток вывода
                работают с байтами          -       InputStream       -       OutputStream
                работают с символами        -          Reader         -          Writer


-------------------------------------------------- OutputStream --------------------------------------------------------
        1. Иерархия  OutputStream
                                            OutputStream
                                                |_________  ByteArrayOutputStream
                                                |_________  FileOutputStream
                                                |_________  FilterOutputStream
                                                |                |_____________  BufferedOutputStream
                                                |                |_____________  DataOutputStream
                                                |                |_____________  ZipOutputStream
                                                |                |_____________  PrintStream
                                                |_________  ObjectOutputStream
                                                |_________  PipedOutputStream

        3. Класс OutputStream - это абстрактный класс, определяющий байтовый поток вывода.
            Наследники данного класса определяют куда направлять данные:
                    - в массив байтов (из массива байтов можно создать текстовую строку String
                    - в файл
                    - канал

        4. Методы класса OutputStream :
            -   void write(int b)                        -   метод записывает один байт информации
                                                             тип int сужается до byte, лишняя часть просто отбрасывается
            -   void write(byte[] b)                     -   записывает в выходной поток весь указанный массив байтов
            -   void write(byte b[], int from, int len)  -   метод записывает часть блока байт
                                                                 Используется в случаях, когда есть вероятность,
                                                             что блок данных был заполнен не целиком
            -   void flush()                             -   если есть данные, которые хранятся где-то внутри и еще не записаны,
                                                             то они записываются
            -   void close()                             -   закрывает выходной поток
                                                               - в поток больше нельзя писать данные, flush вызывается автоматически
                                                               - последующие попытки записи в этот поток будут возбуждать IOException


        ----------------------------------- класс FileOutputStream -----------------------------------------------------
                Создаёт объект класса OutputStream, который можно использовать для записи байтов в файл.
                    - это основной класс для работы с файлами, который наследует всю его функциональность
                            - какой-либо доп функциональности по сравнению с базовым классом FileOutputStream не добавляет
                    - создание нового объекта не зависит от того, существует ли заданный файл или нет
                            - если файл отсутствует, то будет создан новый файл
                            - если файл существует, тогда будет полностью обновлен
                                    - для добавления записи пользуются конструктором 3 (добавляя append - true)
                    - в случае попытки открытия файла, доступного только для чтения, будет вызвано исключение

                Конструкторы:
                    - public FileOutputStream(File file) throws FileNotFoundException;
                    - public FileOutputStream(String name) throws FileNotFoundException;
                    - public FileOutputStream(String name, boolean append) throws FileNotFoundException;

                Методы:
                    - void write(int data)  —   метод записывает очередной байт, обрезая переменную data до одного байта
                    - void flush()          —   часто данные для записи сначала собираются в большие блоки в памяти,
                                                а потом только пишутся на диск
                                                    - flush требует немедленно записать всю несохраненную информацию на диск
                    - void close()          —   метод «закрывает» поток, вызывается после окончания работы с потоком
                                                    - в поток больше нельзя писать данные, flush вызывается автоматически

                Класс FileOutputStream предназначен прежде всего для записи двоичных файлов.
                    - можно использовать для работы с текстовыми файлами, но для этой задачи больше подходят другие классы


        -------------------------------------- класс ByteArrayOutputStream ---------------------------------------------
                Представляет поток вывода, использующий массив байтов в качестве места вывода.

                Конструкторы:
                        -   ByteArrayOutputStream()            -    создает массив данных для хранения байтов длиной в 32 байта
                        -   ByteArrayOutputStream(int size)    -    создает массив длиной size

                В классе ByteArrayOutputStream метод write записывает в поток некоторые данные (массив байтов).
                    -   этот массив байтов записывается в объекте ByteArrayOutputStream в защищенное поле buf,
                        которое представляет также массив байтов (protected byte[] buf)

                - writeTo()         -   перенаправляет массив байтов в другой поток

                - toString()        -   возвращает массив байтов в виде текта (можно не писать)
                - toByteArray()     -   возвращает массив байтов в виде массива байтов

                Для ByteArrayOutputStream не надо явным образом закрывать поток с помощью метода close


        --------------------------------------- класс BufferedOutputStream ---------------------------------------------
                Создает буфер для потоков вывода
                    - буфер накапливает выводимые байты без постоянного обращения к устройству
                    - когда буфер заполнен, производится запись данных

                В конструкторе принимает в качестве параметра объект OutputStream

                    BufferedOutputStream не добавляет много новой функциональности, он просто оптимизирует действие потока вывода
                и его следует использовать для организации более эффективного буферизованного вывода в поток


        ------------------------------------------ класс DataOutputStream ----------------------------------------------
                Позволяет писать данные в поток через интерфейс DataOutput, который определяет методы, преобразующие
             элементарные значения в форму последовательности байтов.
                Такие потоки облегчают сохранение в файле двоичных данных.

                Для записи каждого из примитивных типов предназначен свой метод класса DataOutputStream:
                    -   writeByte(int value)            -       записывает в поток 1 байт
                    -   writeChar(int value)            -       записывает 2х-байтовое значение char
                    -   writeInt(int value)             -       записывает в поток целочисленное значение int
                    -   writeShort(int v)               -       записывает в поток значение short
                    -   writeFloat(float value)         -       записывает в поток 4-байтовое значение float
                    -   writeDouble(double value)       -       записывает в поток 8-байтовое значение double
                    -   writeBoolean(boolean value)     -       записывает в поток булевое однобайтовое значение
                    -   writeLong(long value)           -       записывает в поток значение long
                    -   writeUTF(String value)          -       записывает в поток строку в кодировке UTF-8


        --------------------------------------------- класс PrintStream ------------------------------------------------
                Является именно тем классом, который используется для вывода информации в консоль.
                    Когда мы с помощью вызова System.out.println() пишем в консоль некоторую информацию,
                то тем самым используется PrintStream, так как
                         - переменная out класса System представляет объект класса PrintStream,
                         - а метод println() - это метод класса PrintStream

                Но PrintStream можно использовать для записи информации в поток вывода.

                В случае с выводом на консоль с помощью System.out.println() в качестве потока вывода выступает консоль.

                Для вывода информации в выходной поток PrintStream использует следующие методы:
                        -   println()       -       вывод строковой информации с переводом строки
                        -   print()         -       вывод строковой информации без перевода строки
                        -   printf()        -       форматированный вывод


        ----------------------------------------- класс ObjectOutputStream ---------------------------------------------
                Используется для сериализации объектов в поток
                    - сериализация      -   процесс записи состояния объекта в поток
                    - десериализация    -   процесс извлечения или восстановления состояния объекта из потока
                Сериализация очень удобна, когда идет работа со сложными объектами

                Для записи данных ObjectOutputStream использует ряд методов, среди которых можно выделить следующие:
                    -   void write(byte[] buf)          -   записывает в поток массив байтов
                    -   void write(int val)             -   записывает в поток один младший байт из val
                    -   void writeBoolean(boolean val)  -   записывает в поток значение boolean
                    -   void writeByte(int val)         -   записывает в поток один младший байт из val
                    -   void writeChar(int val)         -   записывает в поток значение типа char, представленное целочисленным значением
                    -   void writeDouble(double val)    -   записывает в поток значение типа double
                    -   void writeFloat(float val)      -   записывает в поток значение типа float
                    -   void writeInt(int val)          -   записывает целочисленное значение
                    -   void writeLong(long val)        -   записывает значение типа long
                    -   void writeShort(int val)        -   записывает значение типа short
                    -   void writeUTF(String str)       -   записывает в поток строку в кодировке UTF-8
                    -   void writeObject(Object obj)    -   записывает в поток отдельный объект
                    -   void flush()                    -   сбрасывает содержимое буфера в выходной поток и очищает его
                    -   void close()                    -	закрывает поток

                Представленные методы охватывают весь спектр данных, которые можно сериализовать


        ------------------------------------------ класс PipedOutputStream ---------------------------------------------
                Класс PipedOutputStream может быть подключен к PipedInputStream, используемый для установления связи
            между двумя каналами.
                Данные в PipedOutputStream передаются в потоке Thread, который отправляет их в подключенный PipedInputStream,
            где данные также читаются, но в другом потоке
                То есть, класс PipedOutputStream предназначен для передачи информации между программами через каналы (pipes).

                Наиболее часто используемые методы**:
                    -   void write(int b)                           -   запись байта в канал
                    -   void write(byte[] bytes, int off, int len)  -   запись определенного количества len байт начиная
                                                                        со смещения off массив bytes
                    -   connect(PipedInputStream pis)               -   установление связи c каналом ввода pis
                    -   flush()                                     -   сброс данных в канал
                    -   close()                                     -   закрытие канала

                    ** - все методы класса могут вызвать исключение IOException.




-------------------------------------------------- InputStream ---------------------------------------------------------
        1. Иерархия  InputStream
                                            InputStream
                                                |_________  ByteArrayInputStream
                                                |_________  FileInputStream
                                                |_________  FilterInputStream
                                                |                |_____________  BufferedInputStream
                                                |                |_____________  DataInputStream
                                                |                |_____________  ZipOutputStream
                                                |_________  ObjectInputStream
                                                |_________  PipedInputStream

        2. Базовый класс InputStream - это абстрактный класс, определяющий входной поток данных, и является родителем для классов,
    получающих данные из различных источников :
                -   массив байтов,
                -   строки (String),
                -   файлы,
                -   каналы pipe, у которых одна из сторон является входом, а вторая сторона играет роль выхода, и т.д.

        3. Методы класса InputStream при возникновении ошибки вызывают исключение IOException

        4. Методы класса InputStream
                - int read()	                            -   метод читает один байт и возвращает его как результат
                                                                    - результат расширяется до int, для красоты
                                                                    - если все байты уже прочитаны, метод вернет «-1»
                - int read(byte[] buff)                     -   метод сразу читает блок байт в буфер (массив байт),
                                                                пока буфер не заполнится
                                                                или не закончатся байты там, откуда он их читает
                                                                    Метод возвращает количество реально прочитанных байт
                                                                (оно может быть меньше длины массива)
                -   int read(byte b[], int off, int len)	-   чтение len байтов в массиве b, начиная со смещения off
                                                                    -   возвращает количество реально прочитанных байтов
                -   long skip(long n)	                    -   пропуск во входном потоке n байтов
                                                                    -   возвращает количество пропущенных байтов
                -   int available()                         -   возвращает количество непрочитанных (доступных) байт
                -   void close()	                        -   метод «закрывает» поток – вызывается после окончания работы с потоком
                                                                    -   последующие попытки чтения из этого потока вызывают IOException
                -   void mark(int readlimit)	            -   установка метки в текущей позиции входного потока,
                                                                которую можно будет использовать до тех пор, пока из потока
                                                                не будет прочитано readlimit байтов
                -   void reset()	                        -   перевод указателя потока на установленную ранее метку
                -   boolean markSupported()	                -   проверка поддержки потоком операции mark/reset

        5. Класс InputStream часто выступает в качестве параметров конструкторов или методов различных классов.
                - согласно правилам наследования это означает, что в качестве параметра может быть передан объект
                  любого класса-наследника
                - это позволяет комбинировать классы для достижения нужных целей


        ------------------------------------------- FileInputStream ----------------------------------------------------
            1. Является основным классом из данной иерархии для работы (чтения содержимого в файле) с файлами.
                    -   так как является наследником класса InputStream  и реализует все его методы

            2. Имеет два основных конструктора:
                    - FileInputStream(File file) throws FileNotFoundException;
                    - FileInputStream(String fileName) throws FileNotFoundException;
                                        - fileName -  имя файла на диске из которого созданный объект  будет читать данные

            3. Если файл не может быть открыт то генерируется исключение FileNotFoundException

            4. Методы
                 - int read()       —  метод читает один байт из файла и возвращает его как результат.
                                       Тип результата расширяется до int.
                 - int available()  —  метод возвращает количество непрочитанных (доступных) байт
                 - void close()     —  метод «закрывает» поток, вызывается после окончания работы с потоком.
                                       Объект выполняет служебные операции, связанные с закрытием файла на диске и т.д.
                                       Из потока больше нельзя читать данные

            5. Класс FileInputStream предназначен прежде всего для работы с двоичными файлами.
               Его можно использовать для работы с текстовыми файлами, но все же для этой задачи больше подходят другие классы.


        ------------------------------------------ ByteArrayInputStream ------------------------------------------------
                Использует байтовый массив в качестве источника данных

                Имеет следующие конструкторы :
                    -   ByteArrayInputStream(byte[] buf)
                    -   ByteArrayInputStream(byte[] buf, int offset, int length);
                                    - в качестве параметров конструкторы ByteArrayInputStream используют
                                            - массив байтов buf для чтения
                                            - смещение относительно начала массива offset
                                            - количество считываемых символов length


        ------------------------------------------- FilterInputStream --------------------------------------------------
            Абстрактный класс, предоставляющий интерфейс для классов-надстроек, которые добавляют к существующим потокам
        полезные свойства.

            FilterInputStream является базовым классом для двух других классов
                    - BufferedInputStream
                    - DataInputStream

            Конструктор
                    FilterInputStream(InputStream inputStream) {
                          this.inputStream = inputStream;
                    }
                            требует передачи в качестве параметра объекта класса InputStream,
                                 т.е. фактически объекта некоторого неабстрактного класса, порожденного от InputStream.

            Прямое использование FilterInputStream в программе нецелесообразно.


        ------------------------------------------- BufferedInputStream ------------------------------------------------
            Cлужит для организации более эффективного "буферизованного" ввода данных.
            Буферизация ввода-вывода является удобным способом оптимизации производительности, позволяя заключить в оболочку
        любой поток класса InputStream


        --------------------------------------------- DataInputStream --------------------------------------------------
            Используется для чтения байтовых данных (не строк)
                - в этом случае необходимо использовать классы из группы InputStream
                - для преобразования строки в массив байтов, пригодный для помещения в поток ByteArrayInputStream,
                  в классе String предусмотрен метод getBytes()
                - полученный ByteArrayInputStream представляет собой поток InputStream, подходящий для передачи DataInputStream

                При побайтовом чтении символов из форматированного потока DataInputStream методом readByte() любое полученное значение
          будет считаться действительным, поэтому возвращаемое значение неприменимо для идентификации конца потока.
                Вместо этого можно использовать метод available(), который сообщает, сколько еще осталось символов.

                Класс DataInputStream позволяет читать элементарные данные из потока через интерфейс DataInput,
          который определяет методы, преобразующие элементарные значения в форму последовательности байтов.
                Такие потоки облегчают сохранение в файле двоичных данных.

                Конструктор класса DataInputStream:      DataInputStream(InputStream stream)

                Методы DataInputStream
                        - boolean readBoolean()     -   байт булевого однобайтового значения
                        - byte readByte()           -   байт одного байта
                        - char readChar()           -   байт значения char
                        - double readDouble()       -   байт восьмибайтового значения double
                        - float readFloat()         -   чтение четырехбайтового значения float
                        - int readInt()             -   чтение целочисленного значения int
                        - long readLong()           -   чтение значения long
                        - short readShort()         -   чтение значения short
                        - String readUTF()          -   чтение строки в кодировке UTF-8
                        - int skipBytes(int n)      -   пропуск при чтении n байтов


        ------------------------------------------- ObjectInputStream --------------------------------------------------
            Класс ObjectInputStream отвечает за чтение ранее сериализованных данных из потока.

            В конструкторе он принимает ссылку на поток ввода:              ObjectInputStream(InputStream in)

            Основные методы класса ObjectInputStream :
                -   int read()	                -       чтение одного байта; возвращает его целочисленное представление
                -   boolean readBoolean()       -       чтение одного значения boolean
                -   byte readByte()             -       чтение одного байта
                -   char readChar()             -       чтение одного символ char
                -   double readDouble()         -       чтение значения типа double
                -   float readFloat()           -       чтение значения типа float
                -   int readInt()               -       чтение целочисленного значения int
                -   long readLong()             -       чтение значения типа long
                -   short readShort()           -       чтение значения типа short
                -   String readUTF()            -       чтение строки в кодировке UTF-8
                -   Object readObject()         -       чтение объекта
                -   int skipBytes(int len)      -       пропуск при чтении нескольких байт, количество которых равно len
                -   int available()             -       чтение количества доступных для чтения байт
                -   void close()                -       закрытие потока


        ------------------------------------------- PipedInputStream ---------------------------------------------------
                Это специальный класс, используемый для связи отдельных программ (потоков) друг с другом внутри одной JVM.
            Данный класс является важным инструментом организации синхронизации потоков.

            Конструкторы PipedInputStream :
                 -  PipedInputStream()
                 -  PipedInputStream(int pipeSize)
                 -  PipedInputStream (PipedOutputStream src)
                 -  PipedInputStream (PipedOutputStream src, int pipeSize)

            Методы PipedInputStream :
                 -  available()
                 -  connect (PipedOutputStream src)
                 -  read()
                 -  read(byte[] b, int off, int len)
                 -  receive(int b)
                 -  close()






----------------------------------------------- RandomAccessFile -------------------------------------------------------
    1. Класс с помощью которого можно одновременно писать/читать в любом месте файла.

    2. Конструктор:
            - RandomAccessFile(String path, String mode)
            - RandomAccessFile(File file, String mode)
                 - mode бывает:
                        - "r"     -    открыто только для чтения
                                       при вызове любого из методов записи вызывает исключение IOException
                        - "rw"    -    открыто для чтения и записи
                                       если файл еще не существует, будет попытка создать файл
                        - "rws"   -    открыт для чтения и записи, как и при "rw"
                                       но требует, чтобы каждое обновление содержимого файла или метаданных записывалось синхронно
                        - "rwd"   -    открыт для чтения и записи, как и при "rw"
                                       но требует, чтобы каждое обновление содержимого файла записывалось синхронно

    3. Методы:
        -   long length()	                        -   возвращает длину файла
        -   void setLength(long newLength)	        -   устанавливает новую длину файла.
                                                           - если файл был больше – он обрезается,
                                                           - если меньше – расширяется и новое место заполняется нулями

        -   long getFilePointer()	                -   возвращает номер байта, на который указывает «курсор»
                                                           может быть от 0 до «длины файла»
        -   void seek(long pos)	                    -   перемещает «курсор», используемый для чтения/записи, в указанное место
        -   int skipBytes(int n)	                -   пропускает n байт.
                                                           т.е. перемещает курсор на n байт вперед

        -   int read()	                            -   читает один байт и возвращает его
        -   int read(byte b[], int off, int len)    -	читает массив байт, начиная с off и количество len
        -   int read(byte b[])                      -	читает массив байт
        -   void readFully(byte b[])	            -   читает массив байт, ждет, пока добавятся новые байты,
                                                        если их не хватает для заполнения массива

        -   boolean readBoolean()	                -   читает boolean с текущей позиции курсора в файле
        -   byte readByte()	                        -   читает byte с текущей позиции курсора в файле
        -   char readChar()	                        -   читает char с текущей позиции курсора в файле
        -   int readInt()	                        -   читает int с текущей позиции курсора в файле
        -   long readLong()	                        -   читает long с текущей позиции курсора в файле
        -   float readFloat()	                    -   читает float с текущей позиции курсора в файле
        -   double readDouble()	                    -   читает double с текущей позиции курсора в файле
        -   String readLine()	                    -   читает строку из файла и возвращает ее

        -   void write(int b)	                    -   пишет один байт в то место, где стоит курсор
        -   void write(byte b[])	                -   пишет массив байт в то место, где стоит курсор
        -   void write(byte b[], int off, int len)	-   пишет массив байт в то место, где стоит курсор

        -   void writeBoolean(boolean v)	        -   пишет boolean в файл (начиная с позиции курсора)
        -   void writeByte(int v)	                -   пишет byte в файл (начиная с позиции курсора)
        -   void writeChar(int v)	                -   пишет char в файл (начиная с позиции курсора)
        -   void writeInt(int v)	                -   пишет int в файл (начиная с позиции курсора)
        -   void writeLong(long v)	                -   пишет long в файл (начиная с позиции курсора)
        -   void writeFloat(float v)	            -   пишет float в файл (начиная с позиции курсора)
        -   void writeDouble(double v)	            -   пишет double в файл (начиная с позиции курсора)
        -   void writeBytes(String s)	            -   пишет строку в файл (начиная с позиции курсора)
        -   void writeChars(String s)	            -   пишет строку в файл (начиная с позиции курсора)

        -   void close()	                        -   закрывает файл






----------------------------------------------------- Reader -----------------------------------------------------------
      1. Абстрактный класс Reader обеспечивает поддержку символьного потока чтения аналогично тому, как это делает InputStream,
         реализующий модель байтового потока ввода.

      2. Методы Reader схожи с теми, которые объявлены в составе InputStream
            -   boolean markSupported()                     -       функция проверки поддержки потоком методов mark() и reset()
            -   void mark(int limit)	                    -       размещение метки в текущей позиции входного потока
            -   void reset()	                            -       сброс указателя ввода в ранее установленную позицию метки
            -   long skip(long count)                       -       функция пропуска  количества символов ввода - сount
                                                                       - возвращает количество действительно пропущенных символов
                                                                       - значение count не должно быть отрицательным

            -   boolean ready()     -   функция проверки готовности объекта для чтения данных,
                                        т.е. в нем существует хотя бы один доступный символ.
                                            Следует заметить, что результат, равный false, отнюдь не свидетельствует о том,
                                        что очередной вызов read приведет к возникновению блокировки, поскольку в промежутке
                                        между обращениями к ready  и read в поток может поступить очередная порция данных
            -   int read() throws lOException	            -       чтение одного символа данных в виде целого числа
                                                                    в диапазоне от 0 до 65535
                                                                       - если символов, готовых для чтения, нет
                                                                         из - за достижения конца потока, возвращается  -1
                                                                       - метод выполняет блокировку до тех пор, пока имеются
                                                                             - доступные для чтения символы
                                                                             - не достигнут конец потока
                                                                             - либо не выброшено исключение
            -   abstract int read(char[] buf, int offset, int count) throws lOException
                                        - чтение символов и сохранение их в массиве buf типа char
                                                - сount   - максимальное количество читаемых символов
                                                - символы записываются в массив, начиная с смещение offset
                                                - содержимое всех остальных элементов массива buf остается неизменным
                                                - метод возвращает количество фактически считанных символов
                                                - если достигнут конец потока и не считан ни один символ, возвращается -1.
                                                - если значение count равно нулю, чтение не производится и возвращается 0.
                                                - метод выполняет блокировку до тех пор, пока имеются
                                                        -   доступные для чтения символы
                                                        -   не достигнут конец потока
                                                        -   либо не выброшено исключение
            -   int read(char[] buf) throws IOException
                                        -  метод аналогичен предыдущему при условии, offset = 0, count = buf.length

            -   abstract void close() throws IOException
                                        - закрытие ранее открытого потока чтения
                                                -   метод используется для высвобождения ресурсов,
                                                    связанных с потоком (таких как дескрипторы открытых файлов).
                                        - любые попытки обращения к закрытому потоку приводят к выбрасыванию исключения
                                          типа IOException, но повторное закрытие потока эффектов не вызывает

      3. При реализации Reader требуется, чтобы производный класс (наследник) обеспечил практическое воплощение варианта метода read,
      осуществляющего чтение данных в массив символов, и версии метода close.
            Во многих случаях, однако, производительность операций может быть улучшена за счет переопределения в производных классах
      и других методов.

      4. Наследники класса Reader
            -   BufferedReader      -   буферизированный входной символьный поток; увеличивает производительность
                                        за счёт буферизации ввода
            -   CharArrayReader     -   входной поток чтения символьного массива
            -   FileReader          -   входной поток чтения содержимого файла
                                        в конструкторе класса нужно указать либо путь к файлу, либо объект типа File
            -   FilterReader        -   фильтрующий читатель
            -   InputStreamReader   -   входной поток, транслирующий байты в символы
            -   LineNumberReader    -   входной поток, подсчитывающий строки
            -   PipedReader         -   входной канал
            -   PushbackReader      -   входной поток, позволяющий возвращать символы обратно в поток
            -   StringReader        -   входной поток, читающий из строки


      ----------------------------------------------- BufferedReader ---------------------------------------------------
            Является потоком, который считывает текст из символьного потока ввода, буферизируя прочитанные символы
                   - создается на основе символьного потока, который в свою очередь создается на основе байтового потока
                   - использование буфера призвано увеличить производительность чтения данных из потока

            Конструкторы:
                -   BufferedReader(Reader in)           -   создает буферезированный поток ввода символов,
                                                            который использует размер буфера по умолчанию
                -   BufferedReader(Reader in, int sz)   -   создает буф поток ввода символов, который использует указанный размер

            Методы:
                -   skip(long n)                                -   пропустить символы
                -   mark(int readAheadLimit)                    -   отметить позицию в потоке
                -   markSupported()                             -   поддерживает ли отметку потока
                -   boolean ready()                             -   может ли поток читать
                -   int read()                                  -   прочитать буфер
                -   int read(char[] cbuf, int off, int len)     -   прочитать буфер
                -   String readLine()                           -   чтение строки
                -   reset()                                     -   сбросить поток
                -   close()                                     -   закрыть поток



----------------------------------------------------- Writer -----------------------------------------------------------
      1. Абстрактный класс Writer обеспечивает поддержку символьного потока записи аналогично тому, как это делает OutputStream,
         реализующий модель байтового потока вывода.

      2. Методы класса Writer:
           - многие методы Writer схожи с теми, которые объявлены в OutputStream
           - помимо этого, в классе Writer предусмотрены некоторые другие полезные версии метода write
           - все методы класса вызывают исключение IOException при возникновении ошибки

           -    append(char c)                              -   добавление символа в конец вызывающего выходного потока

           -    void write(int char) throws lOException     -    запись символа в выходной поток.
                                                                 метод выполняет блокировку потока до тех пор, пока символ
                                                                 не будет записан
           -    abstract void write(char[] buf, int offset,
                            int count) throws lOException	-    запись count символов массива buf, начиная с элемента buf [offset]
                                                                 метод выполняет блокировку до тех пор, пока символы не будут записаны
           -    void write(char[] buf) throws lOException    -	 метод аналогичен предыдущему при условии offset = 0 и count = buf.length
           -    void write(String string, int offset,
                        int count) throws lOException	     -   запись count символов строки string,
                                                                 начиная с символа string.charAt(offset)
           -    void write(String string) throws lOException -	 метод аналогичен предыдущему при условии offset = 0 и count = string.length())

           -    abstract void flush()                       -   сброс потока.
                       Если поток сохраняет в промежуточном буфере некоторое число символов, переданных методами write различных версий,
                    flush провоцирует выполнение операции непосредственной записи данных в объект-получатель.
                       Затем, если получателем является другой поток, тот в свою очередь также сбрасывается.
                       Таким образом, единственный вызов flush приводит к сбросу всех буферов в цепочке взаимосвязанных потоков.
                       Если поток не относится к категории буферизованных, никакие действия не выполняются.

           -    abstract void close() throws lOException    -	закрытие ранее открытого поток записи;
                                                                при необходимости выполняется сброс потока.
                       Метод используется для высвобождения ресурсов, связанных с потоком (таких как дескрипторы открытых файлов)
                       Любые попытки обращения к закрытому потоку приводят к выбрасыванию исключения  IOException,
                    но повторное закрытие потока эффектов не вызывает

      3. Классы, производные от Writer, должны реализовать варианты:
                    -   метода write, связанного с записью символов из части массива,
                    -   метода close и
                    -   метода flush.
            Все остальные методы Writer основаны на трех методах, названных выше.
            Это отличает Writer от класса OutputStream, в котором в качестве базового метода вывода предусмотрен вариант write,
      осуществляющий вывод одного байта, а для методов flush и close предложены реализации по умолчанию.
            Как и в случае с классом Reader, производительность операций может быть улучшена за счет переопределения
      в производных классах и других методов.

      4. Наследники класса Writer
            -   BufferedWriter      -   буферизированный выходной символьный поток;
                                          позволяет повысить производительность за счёт снижения количества операций физической записи
                                        в выходное устройство
            -   CharArrayWriter     -   выходной поток, который пишет в символьный массив
            -   FileWriter          -   выходной поток, пишущий в файл;
                                            -   в конструкторе можно определить вывод в конец файла.
                                            -   создание объекта не зависит от наличия файла, он будет создан в случае необходимости.
                                                    - если файл существует и он доступен только для чтения  - исключение IOException
            -   FilterWriter        -   фильтрующий писатель
            -   OutputStreamWriter  -   выходной поток, транслирующий байты в символы
            -   PipedWriter         -   выходной канал
            -   PrintWriter         -   выходной поток, включающий методы print() и println()
            -   StringWriter        -   выходной поток, пишущий в строку


      ----------------------------------------------- BufferedWriter ---------------------------------------------------
           BufferedWriter записывает текст в поток вывода, предварительно буферизируя записываемые символы, тем самым снижая
       количество обращений к физическому носителю для записи данных.
            - FileWriter сразу записывает данные на диск и каждый раз к нему обращается, буфер работает как обертка
              и ускоряет работу приложения, так как буфер будет записывать данные в себя, а потом большим куском файлы на диск

          Конструкторы:
            -   BufferedWriter(Writer out)
            -   BufferedWriter(Writer out, int size)
                   - в качестве параметра out конструктор BufferedWriter принимает поток вывода, в который надо осуществить запись
                   - второй параметр size указывает на размер буфера

          Методы:
            -   write(int c)                            -   запись в буфер
            -   write(char[] cbuf, int off, int len)    -   запись в буфер
            -   write(String s, int off, int len)       -   запись в буфер
            -   newLine()                               -   перенос на новую строку
            -   flush()                                 -   передать данные из буфера во Writer
            -   close()                                 -   закрыть поток





----------------------------------------------- Работа с ZIP - файлами -------------------------------------------------
            1. java.util.zip -  позволяет работать с библиотеками файлов форматов ZIP и GZIP

            2. Применяя соответствующие классы, можно:
                            - разрабатывать приложения, способные создавать библиотеки архивных файлов
                            - просматривать библиотеки архивных файлов
                            - извлекать из библиотек отдельные или все файлы

            3. ZipEntry -  представляет файл, хрянящийся в архиве
                            - из  ZipInputStream можно читать только объекты типа ZipEntry
                            - в   ZipOutputStream можно писать только объекты ZipEntry
                            - сами ZipEntry как раз можно читать и писать как обычные файлы

            4. Для работы с zip файлами в пакете java.util.zip определены два класса:
                            - ZipInputStream
                            - ZipOutputStream
                                  - c помощью них можно что-то читать/писать прямо из zip-фала


        --------------------------------------------- ZipFile ----------------------------------------------------------
            1. Чтобы получить доступ к таким файлам, прежде нужно создать конструктор:
                - public ZipFile(File file) throws ZipException, IOException       - открывает ZIP-файл через объект класса File
                - public ZipFile(String name) throws IOException                   - открывает ZIP-файл через полный путь к имени файла

            2. Методы:
                -   getName	        -   возвращает имя ZIP-файла

                -   entries         -   возвращает перечисление объектов, хранящихся в архивной библиотеке формата ZIP
                -   getEntry	    -   возвращает объект, хранящийся в библиотеке, по его имени
                      - методы entries и getEntry позволяют получить элементы, хранящиеся в архиве, как объекты класса ZipEntry

                -   getInputStream	-   возвращает ссылку на входной поток для чтения объектов из архива
                -   close	        -   закрывает ZIP-файл

        --------------------------------------------- ZipEntry ---------------------------------------------------------
            1. В классе ZipEntry определены:
                    - две константы
                    - конструктор
                    - несколько методов

            2.1 Константы (обозначают использованный метод компрессии):
                    -   public static final int STORED      -   если файл сохранен в архиве без компрессии  -   ZipEntry.STORED
                    -   public static final int DEFLATED    -   если файл сохранен в архиве с компрессией   -   ZipEntry.DEFLATED

            2.2 Конструктор класса ZipEntry позволяет создать новый элемент оглавления архива с заданным именем:
                    -   public ZipEntry(String name)

            2.3 Методы класса ZipEntry, можно разделить на две группы:
                    -   предназначены для установки атрибутов элемента оглавления архива ZIP
                    -   для извлечения


                    -   void setSize(long size)         -   установка размера несжатого файла
                    -   void setCrc(long crc)           -   установка значения контрольной суммы для несжатого файла,
                                                            описываемого данным элементом оглавления архива.
                                                                Для вычисления контрольной суммы применяется алгоритм CRC-32.
                    -   void setMethod(int method)      -   с помощью этого метода вы можете установить режим добавления файла
                                                            в архив - с компрессией или без компрессии
                                                                -   в первом случае методу необходимо передать ZipEntry.DEFLATED
                                                                -   во втором случае - значение ZipEntry.STORED
                    -   void setExtra(byte extra[])     -   с помощью этого метода можно записать в элемент оглавления архива
                                                            произвольную дополнительную информацию
                    -   void setComment(String comment) -   запись в элемент оглавления архива дополнительной текстовой строки
                                                            комментария
                    -   void setTime(long time)         -   установка времени модификации файла
                                                            (в количестве миллисекунд, прошедших с начала эпохи)


                    -   long getSize()                  -   определение размера несжатого файла
                    -   long getCrc()                   -   предназначен для извлечения контрольной суммы,
                                                                записанной в элемент оглавления
                    -   int getMethod()                 -   позволяет знать способ компрессии, который был использован для файла,
                                                            соответствующего данному элементу архива
                                                                -   может возвращать значения
                                                                            -   ZipEntry.DEFLATED
                                                                            -   ZipEntry.STORED
                    -   byte[] getExtra()               -   возвращает дополнительную информацию, записанную в элементе
                                                            оглавления архива
                    -   String getComment()             -   чтение строки комментария
                    -   long getTime()                  -   определение времени модификации файла
                    -   long getCompressedSize()        -   возвращает размер сжатого файла или значение -1,
                                                            если этот размер неизвестен
                    -   boolean isDirectory()           -   помимо файлов, в архиве могут хранится каталоги.
                                                                - в этом случае имя соответствующего элемента должно
                                                              оканчиваться символом "/".
                                                                - метод isDirectory позволяет узнать, является ли данные элемент
                                                              описателем каталога или файла, возвращает  true / false
                    -   String getName()                -   позволяет узнать имя, соответствующее данному элементу оглавления архива
                                                                - изменить имя нельзя - оно передается конструктору класса ZipEntry
                                                              при создании нового элемента оглавления


        --------------------------------------------- ZipOutputStream --------------------------------------------------
            1.  ZipOutputStream используется для записи архива:
                    - для создания архива используется класс ZipOutputStream
                    - для создания объекта ZipOutputStream в его конструктор передается  -  ZipOutputStream(OutputStream out)
                    - для записи файлов в архив для каждого файла создается объект ZipEntry,
                      в конструктор которого передается имя архивируем файла
                    - чтоб добавить каждый объект ZipEntry в архив, применяется метод putNextEntry()

            2. Методы  ZipOutputStream (можно не указывать степень и метод сжатия, тода будут использоваться настройки по умолчанию)
                    -   void setComment(String comment)         -   устанавливает комментарий к архиву
                    -   void setMethod(int method)              -   указывает метод (тип) сжатия
                    -   void setLevel(int level)                -   указывает степень сжатия (чем сильнее, тем медленнее)
                    -   void write(byte[] b, int off, int len)  -   пишет набор байт в текущий ZipEntry
                    -   void putNextEntry(ZipEntry e)           -   добавляет новый ZipEntry
                    -   void closeEntry()                       -   закрывает текущий ZipEntry
                    -   void close()                            -   закрывает поток



------------------------------------------------- ZipInputStream -------------------------------------------------------
            1. ZipInputStream - используется для чтение архива:
                    - в конструкторе он принимает поток, указывающий на zip-архив :   ZipInputStream(InputStream in)
                    - для считывания файлов из архива ZipInputStream использует метод getNextEntry() - возвращает объект ZipEntry
                    - объект ZipEntry представляет отдельную запись в zip-архиве
                    - так как ZipInputStream – это поток, поэтому все ZipEntry могут быть прочитаны только последовательно
                         - лучше всего это представить:
                             - читаешь текстовый файл,
                             - ZipEntry - это строки в файле,
                             - которые можно читать
                                    - как данной текущей строки - текущий ZipEntry,
                                    - так и прыгать по строкам – getNextEntry, closeEntry

            2. Методы:
                -    int available()                        -   возвращает 1, если есть доступные ZipEntry, иначе 0
                -    long skip(long n)                      -	пропускает n байт при чтении из потока
                -    ZipEntry getNextEntry()                -   возвращает объект, описывающий следующий ZipEntry
                                                                    (пропускает все байты текущего entry)
                -    int read(byte[] b, int off, int len)   -   читает байты из текущего ZipEntry
                -    void closeEntry()                      -   закрывает чтение текущего ZipEntry
                                                                    (пропускает все байты текущего entry).
                -    void close()	                        -   закрывает поток
