

------------------------------------------------------- Stack ----------------------------------------------------------
    1. Stack - хранилище данных, которое позволяет добавлять и удалять элементы по принципу "добавлен последним - взят первым"
                    - (LIFO - Last Input, First Output)
                    - последний добавленный элемент первым извлекается из стека

    2. JDK содержит собственный класс Stack, который вполне можно было бы использовать для целей создания стека,
    хотя нередко лучше применить собственное решение.


------------------------------------------------------- Queue ----------------------------------------------------------
        1. Кроме стека, работающего по принципу LIFO, часто используется принцип FIFO (First Input, First Output),
    особенно это касается приложений, работающих с очередями

        2. При работе с очередью:
                - новые элементы добавляются в конец,
                - а если хочешь получить/удалить элемент, он будет взят из начала

        3. Стоит заменить, что в Java очередь представлена не классом, а интерфейсом - Queue
                - но в месте с тем, очередь в Java - это интерфейс, у которого есть очень много реализаций
                - очереди наследуют 4 разных интерфейска и большой список классов

                        All Known Subinterfaces
                            BlockingDeque<E>, BlockingQueue<E>, Deque<E>, TransferQueue<E>

                        All Known Implementing Classes
                            AbstractQueue, ArrayBlockingQueue, ArrayDeque
                            ConcurrentLinkedDeque, ConcurrentLinkedQueue, DelayQueue
                            LinkedBlockingDeque, LinkedBlockingQueue, LinkedList, LinkedTransferQueue
                            PriorityBlockingQueue, PriorityQueue, SynchronousQueue


                - суб - интерфейс очереди Deque     -   двусторонняя очередь (широко используется в разработке)
                                - она расширяет функционал обычной очереди, позволяет:
                                        - добавлять элементы на оба края (в начало и конец очереди)
                                        - и забирать элементы с обоих краев очереди

                - в списке классов - очередей есть LinkedBlockingDeque, LinkedBlockingQueue, LinkedList, LinkedTransferQueue
                                - здесь находится LinkedList - cвязанный список
                                - то есть, он имплементирует интерфейс Queue
                                - список всех интерфейсов, которые реализует LinkedList
                                        All Implemented Interfaces:
                                            Serializable, Cloneable, Iterable<E>, Collection<E>, Deque<E>, List<E>, Queue<E>
                                                - можно увидеть LinkedList реализует интерфейс Deque<E>
                                                - благодаря этому мы можем получать/добавлять элементы из начала и конца

                                                - Методы, которые достались LinkedList от интерфейса Deque:
                                                    -   peekFirst()     —   возвращает (но не удаляет из очереди) первый элемент
                                                    -   peekLast()      —   возвращает (но не удаляет из очереди) последний элемент
                                                    -   pollFirst()     —   возвращает первый элемент из очереди и удаляет его
                                                    -   pollLast()      —   возвращает последний элемент из очереди и удаляет его
                                                    -   addFirst()      —   добавляет новый элемент в начало очереди
                                                    -   addLast()       —   добавляет элемент в конец очереди

        4. PriorityQueue - приоритетная очередь (самая интересная реализация Queue)
                Например,
                    если в очереди в магазин стоит 50 человек, и 7 из них являются VIP, то PriorityQueue позволяет обслуживать
                    VIP - клиентов в первую очередь





